generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid()) @db.VarChar(64)
  email     String   @unique @db.VarChar(191)
  password  String
  firstName String
  lastName  String
  avatar    String?
  role      Role     @default(STUDENT)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  courses      Course[]
  enrollments  Enrollment[]
  progress     Progress[]
  quizAttempts QuizAttempt[]
  payments     Payment[]

  @@map("users")
}

model Course {
  id          String       @id @default(cuid()) @db.VarChar(64)
  title       String
  description String       @db.Text
  price       Float        @default(0)
  level       Level
  duration    Int
  thumbnail   String?
  status      CourseStatus @default(DRAFT)
  featured    Boolean      @default(false)
  teacherId   String       @db.VarChar(64)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  teacher     User         @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  enrollments Enrollment[]
  payments    Payment[]

  @@map("courses")
}

model Lesson {
  id          String   @id @default(cuid()) @db.VarChar(64)
  title       String
  description String?
  content     String   @db.Text
  videoUrl    String?
  duration    Int
  order       Int
  isPublished Boolean  @default(false)
  courseId    String   @db.VarChar(64)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course   Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  quizzes  Quiz[]
  progress Progress[]

  @@map("lessons")
}

model Quiz {
  id           String   @id @default(cuid()) @db.VarChar(64)
  title        String
  description  String?
  timeLimit    Int?
  passingScore Int      @default(70)
  lessonId     String   @db.VarChar(64)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  lesson    Lesson        @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  questions QuizQuestion[]
  attempts  QuizAttempt[]

  @@map("quizzes")
}

model QuizQuestion {
  id            String   @id @default(cuid()) @db.VarChar(64)
  question      String   @db.Text
  options       Json
  correctAnswer String
  explanation   String?  @db.Text
  order         Int
  quizId        String   @db.VarChar(64)
  createdAt     DateTime @default(now())

  // Relations
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@map("quiz_questions")
}

model QuizAttempt {
  id          String   @id @default(cuid()) @db.VarChar(64)
  score       Int
  answers     Json
  timeSpent   Int
  passed      Boolean
  userId      String   @db.VarChar(64)
  quizId      String   @db.VarChar(64)
  attemptedAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@map("quiz_attempts")
}

model Enrollment {
  id         String   @id @default(cuid()) @db.VarChar(64)
  userId     String   @db.VarChar(64)
  courseId   String   @db.VarChar(64)
  enrolledAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Progress {
  id          String    @id @default(cuid()) @db.VarChar(64)
  userId      String    @db.VarChar(64)
  lessonId    String    @db.VarChar(64)
  completed   Boolean   @default(false)
  timeSpent   Int       @default(0)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("progress")
}

model Payment {
  id            String        @id @default(cuid()) @db.VarChar(64)
  userId        String        @db.VarChar(64)
  courseId      String?       @db.VarChar(64)
  amount        Float
  currency      String        @default("EUR")
  status        PaymentStatus
  paymentMethod String
  stripeId      String?       @db.VarChar(64)
  createdAt     DateTime      @default(now())

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course? @relation(fields: [courseId], references: [id], onDelete: SetNull)

  @@map("payments")
}

model Announcement {
  id         String   @id @default(cuid()) @db.VarChar(64)
  title      String
  content    String   @db.Text
  image      String?
  targetRole Role?
  isActive   Boolean  @default(true)
  startDate  DateTime @default(now())
  endDate    DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("announcements")
}

model Product {
  id           String   @id @default(cuid()) @db.VarChar(64)
  name         String
  description  String?  @db.Text
  price        Float
  discount     Float?
  discountType String?
  images       Json
  category     String?
  isActive     Boolean  @default(true)
  stock        Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("products")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum Level {
  A1
  A2
  B1
  B2
  C1
  C2
}

enum CourseStatus {
  DRAFT
  PENDING
  PUBLISHED
  FEATURED
  ARCHIVED
}

enum PaymentStatus {
  pending
  succeeded
  failed
  refunded
}
